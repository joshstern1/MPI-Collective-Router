Communicators provide a safe communication context for message passing, and are particularly useful in performing collectives over a subset of ranks. In this work, we specifically focus on intra-communicators due to their popularity and simplicity compared to inter-communicators, which is a topic that could be furthered studied in future work. Communicator support is absolutely essential in performing collectives in the network, yet few implementations of collective offload include or discuss it. This is because the combination of the MPI standard and current implementations of communicators in make communicator support in the network inherently difficult. Communicators are uniquely defined by the combination of a context id and a process group. Whenever messages are passed, context ids are passed within the message envelope and allow the receiver to identify the communicator that the message is a part of. However, in context ids are not necessary unique. For example, in an MPI_Comm_Split operation, an existing communicator such as MPI_COMM_WORLD is divided up into smaller communicators. Such an operation is common in creating a set row-wise or column-wise communicators when using a matrix of ranks. Even though each resulting communicator has its own mutually exclusive group of processors, the context ids of each communicator will be the same. In a regular processor with enough memory, it is trivial to receive a message, check its context id, and verify that the sender and receiver are both in the same communicator. However on an FPGA in the network with limited memory, it is not feasible to store the context ids and their corresponding process groups for all communicators. 
 
