
                      What happens when you call MPI_Send()?

Go to MPI_Send function
Input parameters: 
Address of receive buffer
Max # of elements in receive buffer
Datatype of each receive buffer element
Source
Message tag
Communicator
Create communicator pointer for COMM_WORLD and request ptr = NULL
Enter global mutex
Call MPID_Send function
If eager and contiguous and short, call MPIDI_CH3_EagerContigShortSend
Else if eager and contiguous, call MPIDI_CH3_EagerContigSend
Else if eager and noncontiguous, call MPIDI_CH3_EagerNoncontigSend
Else call rndvSend_fn (rendezvous send)
Return to MPID_Send
Return to MPI_Send
If a request was returned, then we need to block until the request is completed

MPIDI_CH3_EagerContigShortSend
Create eager packet
Store parameters and data in packet
Call MPIDI_CH3_iStartMsg
Attempts to send the message immediately.  If the entire message is successfully sent, then NULL is returned.  Otherwise a request is allocated, the iovec and the first buffer pointed to by the iovec are copied into the request, and a pointer to the request is returned.

mpid/ch3/channels/nemesis/src/ch3_istartmsg

MPIDI_CH3_iStartMsg
Input parameters:
Virtual connection
Input/Output Virtualization, packetsize, Request pointer
If vc->ch.iStartContigMsg, then vc->ch.iStartContigMsg(vc, hdr, hdr_sz, NULL, 0, sreq_ptr)
StartContigMsg is in ch3_pre.h
Else add a request to the queue and return the request

Short protocol- data is part of envelope

For nonblocking: MPIDI_CH3_iSendv instead of iStartMsg in ch3/channels

//all from mpidpkt.h

typedef struct MPIDI_CH3_Pkt_eagershort_send {
    MPIDI_CH3_Pkt_type_t type;  /* XXX - uint8_t to conserve space ??? */
    MPIDI_Message_match match;
    MPIDI_msg_sz_t data_sz;
#if defined(MPID_USE_SEQUENCE_NUMBERS)
    MPID_Seqnum_t seqnum;
#endif
    int data[MPIDI_EAGER_SHORT_INTS];   /* FIXME: Experimental for now */
} MPIDI_CH3_Pkt_eagershort_send_t;
#endif /* defined(USE_EAGER_SHORT) */

MPIDI_EAGER_SHORT_INTS  is defined as 4, so we can send 4 ints

If itâ€™s eager, you don't have to make an IOV
Put the data in the packet (up to 16 bytes)
Else, you store the necessary envelope information in the packet and put both the packet and the data in the IOV

What is a VC? MPIDI_VC_t?

Mpidi_ch3_impl.h

+ vc - virtual connection to send the message over
. iov - a vector of a structure contains a buffer pointer and length


    /* iStartContigMsg -- sends a message consisting of a header (hdr) and contiguous data (data), possibly of 0 size.  If the
       message cannot be sent immediately, the function should create a request and return a pointer in sreq_ptr.  The network
       module should complete the request once the message has been completely sent. */

iStartContigMsg is found in ch3/channels/nemesis/include/mpidi_ch3_pre.h

For iov information: mpliov.h

Link
https://ai2-s2-pdfs.s3.amazonaws.com/114b/54ee75d53be17791cc305f6a863627e74e03.pdf
